import http.client, urllib.request, urllib.parse, urllib.error, base64
import json
import requests
headers = {
    # Request headers
    'Content-Type': 'application/json',
    'Ocp-Apim-Subscription-Key': '9a94c5afb6a34bed810db27ae4f1fbd8',
}

list = [2000486400002, 6407970095106, 7340022562821, 7313740005383, 6925281918988, 6438242484236, 17, 6925281918995, 6430042095636, 7340022562838,
 24, 6413218218008, 6438242484250, 7340022562845, 31, 6411401035807, 6438340001823, 6413218218015, 7340022562852, 3600522674214, 6413218218022,
 6417645305898, 6427401257002, 4014760001579, 48, 55, 6417645305911, 62, 2353055400003, 7321011880003, 6409620029509, 6413218218053, 5700194926661,
 884726562888, 6430049960005, 6413218218060, 79, 5032722301009, 86, 5032722301016, 6430042095704, 7340112740443, 93, 6413218218077, 6430042095711,
 2000136700001, 9788253536354, 4005329109089, 6413218218084, 6407970095205, 5032722301030, 7340112740450, 9788253536361, 6413218218091, 109, 6430042095728,
 6411401035890, 9789511303282, 116, 6413467254901, 9788253536378, 123, 6413218218107, 5032722301054, 9788253536385, 130, 6413218218114, 7388018507906, 5032722301061,
 9788253536392, 6413218218121, 9789511303305, 6410580000910, 147, 7340112740504, 9788253536408, 154, 6413218218138, 6430042095773, 9788253536415, 7340112740511, 161,
 2000449700002, 6413218218145, 6416453075108, 6430042095780, 9788253536422, 6413218218152, 4005329109164, 688955850927, 6412740067504, 6416114909360, 178, 6412740067511,
 9788253536439, 185, 6413218218169, 6430042095803, 9788253536446, 192, 6413218218176, 6418591121600, 9788253536453, 2386449400006, 6413218218183, 6414504296649, 8718696579275,
 9788253536460, 3600541548749, 6413218218190, 208, 5032722301139, 215, 6430042095834, 7613036101851, 222, 6419294191839, 2000762700000, 6413218218206, 4029811261666,
 6413218218213, 6426609058022, 5032722301160, 6413218218220, 239, 54001909, 246, 7340022563064, 6438340002042, 5038862237949, 253, 6413218218237, 7340022563071,
 4029811261697, 2357271200003, 260, 6413218218244, 2000100000007, 6416453075207, 4029811261703, 6430049960203, 6438340002059, 4029811261710, 7340022563088,
 6438340002066, 277, 6430013260056, 6438340002073, 9788253536538, 4251232239898, 284, 6430013260063, 4251232239904, 9788253536545, 6438340002080, 291,
 6434800009507, 6416236020004, 3523230040358, 4005329109287, 4251232239911, 5708869796137, 6434800009514, 9788253536552, 6416236020011, 4029811261741,
 6438340002097, 6434800009521, 307, 8594159305014, 5708869796151, 4251232239928, 6414671020344, 314, 6438340002103, 9788253536569, 6416236020028, 
 6438340002110, 4251232239935, 9788253536576, 321, 6413217694018, 4251232239942, 9788253536583, 2000413000008, 6438340002127, 338, 6410580001108,
 6430013260117, 6438340002134, 4251232239959, 345, 6410580001115, 6438340002141, 4251232239966, 352, 6434800009569, 6410580001122, 6434800009576,
 6438340002158, 6434800009583, 369, 6410580001139, 6434800009590, 376, 4251232239997, 383, 5032722301313, 390, 5032722301320, 2000726000009, 9788253536651,
 4251232240016, 406, 9788253536668, 413, 6414672069021, 9788253536675, 420, 6413467255205, 2370341700005, 6411401036200, 6438242484649, 9788253536682,
 5060045050571, 9789511307983, 2000361100003, 5060045050595, 6408641188585, 6419287380714, 4005808837359, 36282307315, 887961424638, 7310610010881]

 
def pricing_api(list):
    """Gets total price for each individual EAN row and 
    the total for all the EANs
    :param list: list that contains EANs seperated by a comma
    :return json object"""
    
    list = [json.dumps(ean) for ean in list]
    new_dict = {}
    for item in list:
        new_dict[item] = 1 
    body = dict(products=new_dict)
    r = requests.post("https://kesko.azure-api.net/v2/stores/K171/price", headers=headers, json=body)
    return r.json()
    
if __name__ == "__main__":
    x = pricing_api(list)
